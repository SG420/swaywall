#!/usr/bin/env python3

import argparse
import os
import random
import json
from pathlib import Path


def dedupe(lst):
    return list(set(lst))


def ensure_exists(file):
    file.parent.mkdir(parents=True, exist_ok=True)
    file.touch(exist_ok=True)


def find(path, exts):
    res = []
    for e in exts:
        for i in path.glob(f"*.{e}"):
            res.append(i)
    return res


def parse_args():
    self = Path(__file__).name
    ap = argparse.ArgumentParser(self)
    ap.add_argument("dir", help="path to wallpaper directory", type=str)
    ap.add_argument(
        "-r", "--restore", help="restore latest wallpaper", action="store_true"
    )
    return ap.parse_args()


def get_history(hst_file):
    res = []
    ensure_exists(hst_file)
    for line in hst_file.read_text().splitlines():
        i = line.rstrip()
        res.append(i)
    return res

def get_new(walls, hst):
    new_walls = []
    for w in walls:
        if w not in hst:
            new_walls.append(w)
    return random.choice(new_walls)


def remember(new, walls, hst, hst_file):
    """
    Update the wallpaper history file with a new wallpaper

    Parameters:
    - new (list): list of strings of the wallpaper(s) that have just been set
    - walls (list): a list of path objects representing available wallpapers
    - hst (list): a list of strings of the wallpaper history
    - hst_file (Path): the path to the history file

    Returns:
    None
    """
    hst = dedupe(hst)
    random.shuffle(hst)  # avoid cycling through walls in the same order
    for wallpaper in new:
        # insert each new wallpaper to the history
        hst.insert(0, wallpaper)
    del hst[len(walls) - 1 :] 
    with hst_file.open("w") as f:
        for i in hst:
            f.write(f"{i}\n")


def get_outputs():
    '''
    Returns an array of the outputs detected by sway
    '''
    res = os.popen('swaymsg -t get_outputs').read()
    outputs = json.loads(res)
    output_names = [output['name'] for output in outputs if output['active']]
    return output_names

def set_wall(img, output):
    os.system(f"swaymsg output '{output}' bg {img} fill")


def main():
    args = parse_args()
    walls_dir = Path(args.dir)
    # check wallpaper directory exists
    if not walls_dir.is_dir(): 
        raise FileNotFoundError(f"directory not found: {walls_dir}")

    state = os.getenv("XDG_STATE_HOME") or Path.home() / ".local" / "state"
    hst_file = Path(state) / "wallpaperhst" # history file
    img_exts = ["png", "jpg", "jpeg"]

    outputs = get_outputs()

    # check images are in the folder
    walls = find(walls_dir, img_exts) 
    if not walls:
        raise FileNotFoundError(f"no wallpapers found in {walls_dir}")
    
    hst = get_history(hst_file)
    hst_len = len(hst)
    i = len(outputs) - 1
    set_walls = []
    for output in outputs:
        if args.restore and hst:
            # restore previous wallpaper(s)
            set_wall(hst[i % hst_len], output)
            i -= 1
        else:
            # get a new wallpaper
            new = get_new(walls, hst)
            if new:
                set_walls.append(new)
                set_wall(new, output)
            remember(set_walls, walls, hst, hst_file)


if __name__ == "__main__":
    main()

